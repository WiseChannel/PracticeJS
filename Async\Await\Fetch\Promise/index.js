    
    // Promise - это объект который используется в асинхронных операциях, и возращает успешное выполнение кода, или ошибку

    // pending - начальное состояние, ожидание
    // resolved - операция завершена успешно
    // rejected - операция завершена  с ошибкой
    // settled - выполнено или отклонено, но не находится в состоянии ожидания


    //Для обработки данных используют .then и catch.
    // then - для успешного выполнения
    // catch - для ошибки



    //Fetch - глобальный метод fetch, позволяет как и XMLHttpRequest, отправлять асинхронный запрос по сети. Преимуществом fetch, является упрощенный синтаксис, он возращает Promise, позволяет лечге конфигурировать запросы. 

    //Метод Fetch принимает два параментра, первый обязательный URL для запроса, второй, необязательный - настройка запроса


    //Async/Await - позволяет реализововать асинхронные функции.
    //Ключевое слово Async, написанное перед функцией, определяет, что функция является асинхронной(такая функция возращает Promise) и позволяет использовать внутри её оператор awit, который приостанавливает выполнения функции, на время получения результата. 
    
    // Приостановленная с помощью await функция, так же должна возращать Promise


    let  binarySearch = (arr, i) => {

        let mid = Math.floor(arr.length / 2);
        
        if (arr[mid] === i) {
            console.log("match", arr[mid], i);
            return arr[mid];
        } else if (arr[mid] < i && arr.length > 1) {
            binarySearch(arr.splice(mid, Number.MAX_VALUE), i);
        } else if (arr[mid] > i && arr.length > 1) {
            binarySearch(arr.splice(0, mid), i);
        } else {
            console.log("not found", i);
            return -1;
        }
    
    }
    
    var ar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    binarySearch(ar, 3);
    binarySearch(ar, 7);
    binarySearch(ar, 13);